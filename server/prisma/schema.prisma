// This is the Prisma schema file for the job board application.
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client_User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique
  location  String
  firstName String
  lastName  String
  company   String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs        Job[]
  paymentLogs ClientPaymentLog[] // NEW: Relationship to payments
}

model ClientPaymentLog {
  id         String      @id @default(cuid())
  clientId   String
  client     Client_User @relation(fields: [clientId], references: [id])
  jobId      String      @unique
  job        Job         @relation(fields: [jobId], references: [id])
  phone      String
  amount     Int
  receipt    String      @unique
  status     PaymentStatus // "Success", "Failed", etc.
  rawPayload Json?
  createdAt  DateTime    @default(now())

  @@index([clientId])
  @@index([jobId])
}

model Job {
  id       String @id @default(cuid())
  title    String
  category String
  jobType  String
  location String
  duration String
  salary   String

  Jobdescription      String
  SkillsAndrequirements     String
  responsibilities String
  benefits         String? // Optional field

  companyName      String
  contactPerson    String
  phoneNumber      String
  email            String
  preferredContact String

  timePosted DateTime @default(now())
  isUrgent   Boolean  @default(false)
  isPaid     Boolean  @default(false) //  Was job ad paid for?

  clickCount Int      @default(0) //  Tracks how many times the job has been viewed or clicked
  status JobStatus @default(PENDING)


  // Relations
  postedById String
  postedBy   Client_User @relation(fields: [postedById], references: [id])

  payment ClientPaymentLog? // Link to payment
}

model Fundi_User {
  id               String          @id @default(cuid())
  email            String          @unique
  firstName        String
  lastName         String
  phone            String          @unique
  location         String
  primary_skill    String
  experience_level ExperienceLevel
  biography        String
  password         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  subscriptionPlan Plan      @default(FREE)
  planStartDate    DateTime? // for premium
  planEndDate      DateTime? // for premium

  trialEndsAt        DateTime? // 7-day free trial tracker
  subscriptionStatus SubscriptionStatus @default(TRIAL)

  subscriptions Subscription[]
  paymentLogs   PaymentLog[]
}

model Subscription {
  id        String     @id @default(cuid())
  fundiId   String
  fundi     Fundi_User @relation(fields: [fundiId], references: [id])
  plan      Plan
  receipt   String?    @unique
  startDate DateTime
  endDate   DateTime
  status    String     @default("PENDING") // ACTIVE, EXPIRED, CANCELLED, etc.

  mpesaCheckoutRequestId String? // Optional for M-Pesa tracking
  mpesaMerchantRequestId String?

  createdAt DateTime @default(now())

  @@index([fundiId])
  @@index([receipt])
}

model PaymentLog {
  id         String        @id @default(cuid())
  phone      String
  amount     Int
  receipt    String        @unique
  status     PaymentStatus @default(PENDING)
  fundi      Fundi_User?   @relation(fields: [fundiId], references: [id])
  fundiId    String?
  rawPayload Json?

  checkoutRequestId String? // STK Push ID
  merchantRequestId String?
  resultCode        Int?
  resultDesc        String?
  transactionDate   DateTime?

  createdAt DateTime @default(now())

  @@index([fundiId])
  @@index([receipt])
  @@index([createdAt])
}

enum Plan {
  FREE
  PREMIUM
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERIENCED
  EXPERT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum JobStatus {
  PENDING       // Waiting for moderation or approval
  ACTIVE        // Live and visible to users
  CLOSED        // Job is no longer accepting applications
  REJECTED      // Rejected during moderation
  EXPIRED       // Automatically marked expired after a period
}
